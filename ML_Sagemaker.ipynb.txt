{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7d74d1c2"
      },
      "source": [
        "## Reading Datasets from S3 Bucket"
      ],
      "id": "7d74d1c2"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "e1181200"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import boto3\n",
        "import io"
      ],
      "id": "e1181200"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0704e809"
      },
      "outputs": [],
      "source": [
        "df_list = []\n",
        "\n",
        "for i in range(1,5):\n",
        "    file_key = 'data'+str(i)+'.csv'\n",
        "\n",
        "    s3_client = boto3.client('s3')\n",
        "\n",
        "    obj = s3_client.get_object(Bucket='myawsbucket658', Key=file_key)\n",
        "\n",
        "    df = pd.read_csv(io.BytesIO(obj['Body'].read()))\n",
        "\n",
        "    df_list.append(df)"
      ],
      "id": "0704e809"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rMvp4Jjmimfs"
      },
      "source": [
        "## Combining all dataframe into single dataframe"
      ],
      "id": "rMvp4Jjmimfs"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8c423800"
      },
      "outputs": [],
      "source": [
        "data = pd.concat(df_list, ignore_index=True, sort=False)"
      ],
      "id": "8c423800"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "a8ccf1b7",
        "outputId": "1283a04e-4494-4991-c9b7-8028aedc0ad1"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>diagnosis</th>\n",
              "      <th>radius_mean</th>\n",
              "      <th>texture_mean</th>\n",
              "      <th>perimeter_mean</th>\n",
              "      <th>area_mean</th>\n",
              "      <th>smoothness_mean</th>\n",
              "      <th>compactness_mean</th>\n",
              "      <th>concavity_mean</th>\n",
              "      <th>concave points_mean</th>\n",
              "      <th>...</th>\n",
              "      <th>texture_worst</th>\n",
              "      <th>perimeter_worst</th>\n",
              "      <th>area_worst</th>\n",
              "      <th>smoothness_worst</th>\n",
              "      <th>compactness_worst</th>\n",
              "      <th>concavity_worst</th>\n",
              "      <th>concave points_worst</th>\n",
              "      <th>symmetry_worst</th>\n",
              "      <th>fractal_dimension_worst</th>\n",
              "      <th>Unnamed: 32</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>842302</td>\n",
              "      <td>M</td>\n",
              "      <td>17.99</td>\n",
              "      <td>10.38</td>\n",
              "      <td>122.80</td>\n",
              "      <td>1001.0</td>\n",
              "      <td>0.11840</td>\n",
              "      <td>0.27760</td>\n",
              "      <td>0.3001</td>\n",
              "      <td>0.14710</td>\n",
              "      <td>...</td>\n",
              "      <td>17.33</td>\n",
              "      <td>184.60</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>0.1622</td>\n",
              "      <td>0.6656</td>\n",
              "      <td>0.7119</td>\n",
              "      <td>0.2654</td>\n",
              "      <td>0.4601</td>\n",
              "      <td>0.11890</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>842517</td>\n",
              "      <td>M</td>\n",
              "      <td>20.57</td>\n",
              "      <td>17.77</td>\n",
              "      <td>132.90</td>\n",
              "      <td>1326.0</td>\n",
              "      <td>0.08474</td>\n",
              "      <td>0.07864</td>\n",
              "      <td>0.0869</td>\n",
              "      <td>0.07017</td>\n",
              "      <td>...</td>\n",
              "      <td>23.41</td>\n",
              "      <td>158.80</td>\n",
              "      <td>1956.0</td>\n",
              "      <td>0.1238</td>\n",
              "      <td>0.1866</td>\n",
              "      <td>0.2416</td>\n",
              "      <td>0.1860</td>\n",
              "      <td>0.2750</td>\n",
              "      <td>0.08902</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>84300903</td>\n",
              "      <td>M</td>\n",
              "      <td>19.69</td>\n",
              "      <td>21.25</td>\n",
              "      <td>130.00</td>\n",
              "      <td>1203.0</td>\n",
              "      <td>0.10960</td>\n",
              "      <td>0.15990</td>\n",
              "      <td>0.1974</td>\n",
              "      <td>0.12790</td>\n",
              "      <td>...</td>\n",
              "      <td>25.53</td>\n",
              "      <td>152.50</td>\n",
              "      <td>1709.0</td>\n",
              "      <td>0.1444</td>\n",
              "      <td>0.4245</td>\n",
              "      <td>0.4504</td>\n",
              "      <td>0.2430</td>\n",
              "      <td>0.3613</td>\n",
              "      <td>0.08758</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>84348301</td>\n",
              "      <td>M</td>\n",
              "      <td>11.42</td>\n",
              "      <td>20.38</td>\n",
              "      <td>77.58</td>\n",
              "      <td>386.1</td>\n",
              "      <td>0.14250</td>\n",
              "      <td>0.28390</td>\n",
              "      <td>0.2414</td>\n",
              "      <td>0.10520</td>\n",
              "      <td>...</td>\n",
              "      <td>26.50</td>\n",
              "      <td>98.87</td>\n",
              "      <td>567.7</td>\n",
              "      <td>0.2098</td>\n",
              "      <td>0.8663</td>\n",
              "      <td>0.6869</td>\n",
              "      <td>0.2575</td>\n",
              "      <td>0.6638</td>\n",
              "      <td>0.17300</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>84358402</td>\n",
              "      <td>M</td>\n",
              "      <td>20.29</td>\n",
              "      <td>14.34</td>\n",
              "      <td>135.10</td>\n",
              "      <td>1297.0</td>\n",
              "      <td>0.10030</td>\n",
              "      <td>0.13280</td>\n",
              "      <td>0.1980</td>\n",
              "      <td>0.10430</td>\n",
              "      <td>...</td>\n",
              "      <td>16.67</td>\n",
              "      <td>152.20</td>\n",
              "      <td>1575.0</td>\n",
              "      <td>0.1374</td>\n",
              "      <td>0.2050</td>\n",
              "      <td>0.4000</td>\n",
              "      <td>0.1625</td>\n",
              "      <td>0.2364</td>\n",
              "      <td>0.07678</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã— 33 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "         id diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",
              "0    842302         M        17.99         10.38          122.80     1001.0   \n",
              "1    842517         M        20.57         17.77          132.90     1326.0   \n",
              "2  84300903         M        19.69         21.25          130.00     1203.0   \n",
              "3  84348301         M        11.42         20.38           77.58      386.1   \n",
              "4  84358402         M        20.29         14.34          135.10     1297.0   \n",
              "\n",
              "   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",
              "0          0.11840           0.27760          0.3001              0.14710   \n",
              "1          0.08474           0.07864          0.0869              0.07017   \n",
              "2          0.10960           0.15990          0.1974              0.12790   \n",
              "3          0.14250           0.28390          0.2414              0.10520   \n",
              "4          0.10030           0.13280          0.1980              0.10430   \n",
              "\n",
              "   ...  texture_worst  perimeter_worst  area_worst  smoothness_worst  \\\n",
              "0  ...          17.33           184.60      2019.0            0.1622   \n",
              "1  ...          23.41           158.80      1956.0            0.1238   \n",
              "2  ...          25.53           152.50      1709.0            0.1444   \n",
              "3  ...          26.50            98.87       567.7            0.2098   \n",
              "4  ...          16.67           152.20      1575.0            0.1374   \n",
              "\n",
              "   compactness_worst  concavity_worst  concave points_worst  symmetry_worst  \\\n",
              "0             0.6656           0.7119                0.2654          0.4601   \n",
              "1             0.1866           0.2416                0.1860          0.2750   \n",
              "2             0.4245           0.4504                0.2430          0.3613   \n",
              "3             0.8663           0.6869                0.2575          0.6638   \n",
              "4             0.2050           0.4000                0.1625          0.2364   \n",
              "\n",
              "   fractal_dimension_worst  Unnamed: 32  \n",
              "0                  0.11890          NaN  \n",
              "1                  0.08902          NaN  \n",
              "2                  0.08758          NaN  \n",
              "3                  0.17300          NaN  \n",
              "4                  0.07678          NaN  \n",
              "\n",
              "[5 rows x 33 columns]"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data.head()"
      ],
      "id": "a8ccf1b7"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8023d153"
      },
      "outputs": [],
      "source": [
        "data = data.drop(\"Unnamed: 32\",axis=1)"
      ],
      "id": "8023d153"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2a524e76",
        "outputId": "c1624f8f-9b6e-4c5c-a9a8-7bdd0805c03c"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>radius_mean</th>\n",
              "      <th>texture_mean</th>\n",
              "      <th>perimeter_mean</th>\n",
              "      <th>area_mean</th>\n",
              "      <th>smoothness_mean</th>\n",
              "      <th>compactness_mean</th>\n",
              "      <th>concavity_mean</th>\n",
              "      <th>concave points_mean</th>\n",
              "      <th>symmetry_mean</th>\n",
              "      <th>...</th>\n",
              "      <th>radius_worst</th>\n",
              "      <th>texture_worst</th>\n",
              "      <th>perimeter_worst</th>\n",
              "      <th>area_worst</th>\n",
              "      <th>smoothness_worst</th>\n",
              "      <th>compactness_worst</th>\n",
              "      <th>concavity_worst</th>\n",
              "      <th>concave points_worst</th>\n",
              "      <th>symmetry_worst</th>\n",
              "      <th>fractal_dimension_worst</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4.690000e+02</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>469.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2.856802e+07</td>\n",
              "      <td>13.980371</td>\n",
              "      <td>19.128188</td>\n",
              "      <td>91.006802</td>\n",
              "      <td>640.491684</td>\n",
              "      <td>0.096835</td>\n",
              "      <td>0.104825</td>\n",
              "      <td>0.088068</td>\n",
              "      <td>0.048457</td>\n",
              "      <td>0.181364</td>\n",
              "      <td>...</td>\n",
              "      <td>16.083665</td>\n",
              "      <td>25.498060</td>\n",
              "      <td>106.054328</td>\n",
              "      <td>859.393390</td>\n",
              "      <td>0.132712</td>\n",
              "      <td>0.254991</td>\n",
              "      <td>0.271554</td>\n",
              "      <td>0.113631</td>\n",
              "      <td>0.290711</td>\n",
              "      <td>0.084465</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.249632e+08</td>\n",
              "      <td>3.477196</td>\n",
              "      <td>4.100238</td>\n",
              "      <td>23.997144</td>\n",
              "      <td>342.873322</td>\n",
              "      <td>0.014299</td>\n",
              "      <td>0.053251</td>\n",
              "      <td>0.080184</td>\n",
              "      <td>0.039127</td>\n",
              "      <td>0.027698</td>\n",
              "      <td>...</td>\n",
              "      <td>4.745579</td>\n",
              "      <td>5.858506</td>\n",
              "      <td>33.141058</td>\n",
              "      <td>553.909203</td>\n",
              "      <td>0.022768</td>\n",
              "      <td>0.160684</td>\n",
              "      <td>0.211254</td>\n",
              "      <td>0.066259</td>\n",
              "      <td>0.063929</td>\n",
              "      <td>0.018392</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>8.670000e+03</td>\n",
              "      <td>6.981000</td>\n",
              "      <td>9.710000</td>\n",
              "      <td>43.790000</td>\n",
              "      <td>143.500000</td>\n",
              "      <td>0.052630</td>\n",
              "      <td>0.019380</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.106000</td>\n",
              "      <td>...</td>\n",
              "      <td>7.930000</td>\n",
              "      <td>12.020000</td>\n",
              "      <td>50.410000</td>\n",
              "      <td>185.200000</td>\n",
              "      <td>0.071170</td>\n",
              "      <td>0.027290</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.156500</td>\n",
              "      <td>0.055040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>8.648770e+05</td>\n",
              "      <td>11.660000</td>\n",
              "      <td>16.150000</td>\n",
              "      <td>74.870000</td>\n",
              "      <td>416.200000</td>\n",
              "      <td>0.086540</td>\n",
              "      <td>0.065450</td>\n",
              "      <td>0.029660</td>\n",
              "      <td>0.020310</td>\n",
              "      <td>0.162100</td>\n",
              "      <td>...</td>\n",
              "      <td>12.980000</td>\n",
              "      <td>21.060000</td>\n",
              "      <td>83.900000</td>\n",
              "      <td>513.100000</td>\n",
              "      <td>0.116800</td>\n",
              "      <td>0.148600</td>\n",
              "      <td>0.111700</td>\n",
              "      <td>0.064020</td>\n",
              "      <td>0.248700</td>\n",
              "      <td>0.072200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>9.055010e+05</td>\n",
              "      <td>13.210000</td>\n",
              "      <td>18.800000</td>\n",
              "      <td>85.630000</td>\n",
              "      <td>538.400000</td>\n",
              "      <td>0.096840</td>\n",
              "      <td>0.092630</td>\n",
              "      <td>0.059880</td>\n",
              "      <td>0.032640</td>\n",
              "      <td>0.179100</td>\n",
              "      <td>...</td>\n",
              "      <td>14.830000</td>\n",
              "      <td>25.410000</td>\n",
              "      <td>96.690000</td>\n",
              "      <td>674.700000</td>\n",
              "      <td>0.131600</td>\n",
              "      <td>0.211600</td>\n",
              "      <td>0.226400</td>\n",
              "      <td>0.098510</td>\n",
              "      <td>0.280600</td>\n",
              "      <td>0.080240</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8.610862e+06</td>\n",
              "      <td>15.500000</td>\n",
              "      <td>21.600000</td>\n",
              "      <td>102.700000</td>\n",
              "      <td>748.900000</td>\n",
              "      <td>0.106300</td>\n",
              "      <td>0.130400</td>\n",
              "      <td>0.123500</td>\n",
              "      <td>0.070640</td>\n",
              "      <td>0.195600</td>\n",
              "      <td>...</td>\n",
              "      <td>18.130000</td>\n",
              "      <td>29.660000</td>\n",
              "      <td>123.400000</td>\n",
              "      <td>1009.000000</td>\n",
              "      <td>0.146000</td>\n",
              "      <td>0.337100</td>\n",
              "      <td>0.380900</td>\n",
              "      <td>0.160900</td>\n",
              "      <td>0.318700</td>\n",
              "      <td>0.092210</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>9.113205e+08</td>\n",
              "      <td>27.420000</td>\n",
              "      <td>30.720000</td>\n",
              "      <td>186.900000</td>\n",
              "      <td>2501.000000</td>\n",
              "      <td>0.163400</td>\n",
              "      <td>0.345400</td>\n",
              "      <td>0.426800</td>\n",
              "      <td>0.201200</td>\n",
              "      <td>0.304000</td>\n",
              "      <td>...</td>\n",
              "      <td>36.040000</td>\n",
              "      <td>42.790000</td>\n",
              "      <td>251.200000</td>\n",
              "      <td>4254.000000</td>\n",
              "      <td>0.218400</td>\n",
              "      <td>1.058000</td>\n",
              "      <td>1.252000</td>\n",
              "      <td>0.291000</td>\n",
              "      <td>0.663800</td>\n",
              "      <td>0.207500</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows Ã— 31 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                 id  radius_mean  texture_mean  perimeter_mean    area_mean  \\\n",
              "count  4.690000e+02   469.000000    469.000000      469.000000   469.000000   \n",
              "mean   2.856802e+07    13.980371     19.128188       91.006802   640.491684   \n",
              "std    1.249632e+08     3.477196      4.100238       23.997144   342.873322   \n",
              "min    8.670000e+03     6.981000      9.710000       43.790000   143.500000   \n",
              "25%    8.648770e+05    11.660000     16.150000       74.870000   416.200000   \n",
              "50%    9.055010e+05    13.210000     18.800000       85.630000   538.400000   \n",
              "75%    8.610862e+06    15.500000     21.600000      102.700000   748.900000   \n",
              "max    9.113205e+08    27.420000     30.720000      186.900000  2501.000000   \n",
              "\n",
              "       smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",
              "count       469.000000        469.000000      469.000000           469.000000   \n",
              "mean          0.096835          0.104825        0.088068             0.048457   \n",
              "std           0.014299          0.053251        0.080184             0.039127   \n",
              "min           0.052630          0.019380        0.000000             0.000000   \n",
              "25%           0.086540          0.065450        0.029660             0.020310   \n",
              "50%           0.096840          0.092630        0.059880             0.032640   \n",
              "75%           0.106300          0.130400        0.123500             0.070640   \n",
              "max           0.163400          0.345400        0.426800             0.201200   \n",
              "\n",
              "       symmetry_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n",
              "count     469.000000  ...    469.000000     469.000000       469.000000   \n",
              "mean        0.181364  ...     16.083665      25.498060       106.054328   \n",
              "std         0.027698  ...      4.745579       5.858506        33.141058   \n",
              "min         0.106000  ...      7.930000      12.020000        50.410000   \n",
              "25%         0.162100  ...     12.980000      21.060000        83.900000   \n",
              "50%         0.179100  ...     14.830000      25.410000        96.690000   \n",
              "75%         0.195600  ...     18.130000      29.660000       123.400000   \n",
              "max         0.304000  ...     36.040000      42.790000       251.200000   \n",
              "\n",
              "        area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n",
              "count   469.000000        469.000000         469.000000       469.000000   \n",
              "mean    859.393390          0.132712           0.254991         0.271554   \n",
              "std     553.909203          0.022768           0.160684         0.211254   \n",
              "min     185.200000          0.071170           0.027290         0.000000   \n",
              "25%     513.100000          0.116800           0.148600         0.111700   \n",
              "50%     674.700000          0.131600           0.211600         0.226400   \n",
              "75%    1009.000000          0.146000           0.337100         0.380900   \n",
              "max    4254.000000          0.218400           1.058000         1.252000   \n",
              "\n",
              "       concave points_worst  symmetry_worst  fractal_dimension_worst  \n",
              "count            469.000000      469.000000               469.000000  \n",
              "mean               0.113631        0.290711                 0.084465  \n",
              "std                0.066259        0.063929                 0.018392  \n",
              "min                0.000000        0.156500                 0.055040  \n",
              "25%                0.064020        0.248700                 0.072200  \n",
              "50%                0.098510        0.280600                 0.080240  \n",
              "75%                0.160900        0.318700                 0.092210  \n",
              "max                0.291000        0.663800                 0.207500  \n",
              "\n",
              "[8 rows x 31 columns]"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data.describe()"
      ],
      "id": "2a524e76"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "m29brBMAimfv",
        "outputId": "0e706d2d-863c-43d4-f852-ebdb543949ec"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "id                         0\n",
              "diagnosis                  0\n",
              "radius_mean                0\n",
              "texture_mean               0\n",
              "perimeter_mean             0\n",
              "area_mean                  0\n",
              "smoothness_mean            0\n",
              "compactness_mean           0\n",
              "concavity_mean             0\n",
              "concave points_mean        0\n",
              "symmetry_mean              0\n",
              "fractal_dimension_mean     0\n",
              "radius_se                  0\n",
              "texture_se                 0\n",
              "perimeter_se               0\n",
              "area_se                    0\n",
              "smoothness_se              0\n",
              "compactness_se             0\n",
              "concavity_se               0\n",
              "concave points_se          0\n",
              "symmetry_se                0\n",
              "fractal_dimension_se       0\n",
              "radius_worst               0\n",
              "texture_worst              0\n",
              "perimeter_worst            0\n",
              "area_worst                 0\n",
              "smoothness_worst           0\n",
              "compactness_worst          0\n",
              "concavity_worst            0\n",
              "concave points_worst       0\n",
              "symmetry_worst             0\n",
              "fractal_dimension_worst    0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data.isna().sum()"
      ],
      "id": "m29brBMAimfv"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RwovL81gimfw",
        "outputId": "76fe41e1-864f-40f3-e259-bd7d1bcfd37a"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>diagnosis</th>\n",
              "      <th>radius_mean</th>\n",
              "      <th>texture_mean</th>\n",
              "      <th>perimeter_mean</th>\n",
              "      <th>area_mean</th>\n",
              "      <th>smoothness_mean</th>\n",
              "      <th>compactness_mean</th>\n",
              "      <th>concavity_mean</th>\n",
              "      <th>concave points_mean</th>\n",
              "      <th>...</th>\n",
              "      <th>radius_worst</th>\n",
              "      <th>texture_worst</th>\n",
              "      <th>perimeter_worst</th>\n",
              "      <th>area_worst</th>\n",
              "      <th>smoothness_worst</th>\n",
              "      <th>compactness_worst</th>\n",
              "      <th>concavity_worst</th>\n",
              "      <th>concave points_worst</th>\n",
              "      <th>symmetry_worst</th>\n",
              "      <th>fractal_dimension_worst</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>842302</td>\n",
              "      <td>0</td>\n",
              "      <td>17.99</td>\n",
              "      <td>10.38</td>\n",
              "      <td>122.80</td>\n",
              "      <td>1001.0</td>\n",
              "      <td>0.11840</td>\n",
              "      <td>0.27760</td>\n",
              "      <td>0.30010</td>\n",
              "      <td>0.14710</td>\n",
              "      <td>...</td>\n",
              "      <td>25.380</td>\n",
              "      <td>17.33</td>\n",
              "      <td>184.60</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>0.16220</td>\n",
              "      <td>0.66560</td>\n",
              "      <td>0.7119</td>\n",
              "      <td>0.2654</td>\n",
              "      <td>0.4601</td>\n",
              "      <td>0.11890</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>842517</td>\n",
              "      <td>0</td>\n",
              "      <td>20.57</td>\n",
              "      <td>17.77</td>\n",
              "      <td>132.90</td>\n",
              "      <td>1326.0</td>\n",
              "      <td>0.08474</td>\n",
              "      <td>0.07864</td>\n",
              "      <td>0.08690</td>\n",
              "      <td>0.07017</td>\n",
              "      <td>...</td>\n",
              "      <td>24.990</td>\n",
              "      <td>23.41</td>\n",
              "      <td>158.80</td>\n",
              "      <td>1956.0</td>\n",
              "      <td>0.12380</td>\n",
              "      <td>0.18660</td>\n",
              "      <td>0.2416</td>\n",
              "      <td>0.1860</td>\n",
              "      <td>0.2750</td>\n",
              "      <td>0.08902</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>84300903</td>\n",
              "      <td>0</td>\n",
              "      <td>19.69</td>\n",
              "      <td>21.25</td>\n",
              "      <td>130.00</td>\n",
              "      <td>1203.0</td>\n",
              "      <td>0.10960</td>\n",
              "      <td>0.15990</td>\n",
              "      <td>0.19740</td>\n",
              "      <td>0.12790</td>\n",
              "      <td>...</td>\n",
              "      <td>23.570</td>\n",
              "      <td>25.53</td>\n",
              "      <td>152.50</td>\n",
              "      <td>1709.0</td>\n",
              "      <td>0.14440</td>\n",
              "      <td>0.42450</td>\n",
              "      <td>0.4504</td>\n",
              "      <td>0.2430</td>\n",
              "      <td>0.3613</td>\n",
              "      <td>0.08758</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>84348301</td>\n",
              "      <td>0</td>\n",
              "      <td>11.42</td>\n",
              "      <td>20.38</td>\n",
              "      <td>77.58</td>\n",
              "      <td>386.1</td>\n",
              "      <td>0.14250</td>\n",
              "      <td>0.28390</td>\n",
              "      <td>0.24140</td>\n",
              "      <td>0.10520</td>\n",
              "      <td>...</td>\n",
              "      <td>14.910</td>\n",
              "      <td>26.50</td>\n",
              "      <td>98.87</td>\n",
              "      <td>567.7</td>\n",
              "      <td>0.20980</td>\n",
              "      <td>0.86630</td>\n",
              "      <td>0.6869</td>\n",
              "      <td>0.2575</td>\n",
              "      <td>0.6638</td>\n",
              "      <td>0.17300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>84358402</td>\n",
              "      <td>0</td>\n",
              "      <td>20.29</td>\n",
              "      <td>14.34</td>\n",
              "      <td>135.10</td>\n",
              "      <td>1297.0</td>\n",
              "      <td>0.10030</td>\n",
              "      <td>0.13280</td>\n",
              "      <td>0.19800</td>\n",
              "      <td>0.10430</td>\n",
              "      <td>...</td>\n",
              "      <td>22.540</td>\n",
              "      <td>16.67</td>\n",
              "      <td>152.20</td>\n",
              "      <td>1575.0</td>\n",
              "      <td>0.13740</td>\n",
              "      <td>0.20500</td>\n",
              "      <td>0.4000</td>\n",
              "      <td>0.1625</td>\n",
              "      <td>0.2364</td>\n",
              "      <td>0.07678</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>464</th>\n",
              "      <td>926424</td>\n",
              "      <td>0</td>\n",
              "      <td>21.56</td>\n",
              "      <td>22.39</td>\n",
              "      <td>142.00</td>\n",
              "      <td>1479.0</td>\n",
              "      <td>0.11100</td>\n",
              "      <td>0.11590</td>\n",
              "      <td>0.24390</td>\n",
              "      <td>0.13890</td>\n",
              "      <td>...</td>\n",
              "      <td>25.450</td>\n",
              "      <td>26.40</td>\n",
              "      <td>166.10</td>\n",
              "      <td>2027.0</td>\n",
              "      <td>0.14100</td>\n",
              "      <td>0.21130</td>\n",
              "      <td>0.4107</td>\n",
              "      <td>0.2216</td>\n",
              "      <td>0.2060</td>\n",
              "      <td>0.07115</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>465</th>\n",
              "      <td>926682</td>\n",
              "      <td>0</td>\n",
              "      <td>20.13</td>\n",
              "      <td>28.25</td>\n",
              "      <td>131.20</td>\n",
              "      <td>1261.0</td>\n",
              "      <td>0.09780</td>\n",
              "      <td>0.10340</td>\n",
              "      <td>0.14400</td>\n",
              "      <td>0.09791</td>\n",
              "      <td>...</td>\n",
              "      <td>23.690</td>\n",
              "      <td>38.25</td>\n",
              "      <td>155.00</td>\n",
              "      <td>1731.0</td>\n",
              "      <td>0.11660</td>\n",
              "      <td>0.19220</td>\n",
              "      <td>0.3215</td>\n",
              "      <td>0.1628</td>\n",
              "      <td>0.2572</td>\n",
              "      <td>0.06637</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>466</th>\n",
              "      <td>926954</td>\n",
              "      <td>0</td>\n",
              "      <td>16.60</td>\n",
              "      <td>28.08</td>\n",
              "      <td>108.30</td>\n",
              "      <td>858.1</td>\n",
              "      <td>0.08455</td>\n",
              "      <td>0.10230</td>\n",
              "      <td>0.09251</td>\n",
              "      <td>0.05302</td>\n",
              "      <td>...</td>\n",
              "      <td>18.980</td>\n",
              "      <td>34.12</td>\n",
              "      <td>126.70</td>\n",
              "      <td>1124.0</td>\n",
              "      <td>0.11390</td>\n",
              "      <td>0.30940</td>\n",
              "      <td>0.3403</td>\n",
              "      <td>0.1418</td>\n",
              "      <td>0.2218</td>\n",
              "      <td>0.07820</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>467</th>\n",
              "      <td>927241</td>\n",
              "      <td>0</td>\n",
              "      <td>20.60</td>\n",
              "      <td>29.33</td>\n",
              "      <td>140.10</td>\n",
              "      <td>1265.0</td>\n",
              "      <td>0.11780</td>\n",
              "      <td>0.27700</td>\n",
              "      <td>0.35140</td>\n",
              "      <td>0.15200</td>\n",
              "      <td>...</td>\n",
              "      <td>25.740</td>\n",
              "      <td>39.42</td>\n",
              "      <td>184.60</td>\n",
              "      <td>1821.0</td>\n",
              "      <td>0.16500</td>\n",
              "      <td>0.86810</td>\n",
              "      <td>0.9387</td>\n",
              "      <td>0.2650</td>\n",
              "      <td>0.4087</td>\n",
              "      <td>0.12400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>468</th>\n",
              "      <td>92751</td>\n",
              "      <td>1</td>\n",
              "      <td>7.76</td>\n",
              "      <td>24.54</td>\n",
              "      <td>47.92</td>\n",
              "      <td>181.0</td>\n",
              "      <td>0.05263</td>\n",
              "      <td>0.04362</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>...</td>\n",
              "      <td>9.456</td>\n",
              "      <td>30.37</td>\n",
              "      <td>59.16</td>\n",
              "      <td>268.6</td>\n",
              "      <td>0.08996</td>\n",
              "      <td>0.06444</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.2871</td>\n",
              "      <td>0.07039</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>469 rows Ã— 32 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           id  diagnosis  radius_mean  texture_mean  perimeter_mean  \\\n",
              "0      842302          0        17.99         10.38          122.80   \n",
              "1      842517          0        20.57         17.77          132.90   \n",
              "2    84300903          0        19.69         21.25          130.00   \n",
              "3    84348301          0        11.42         20.38           77.58   \n",
              "4    84358402          0        20.29         14.34          135.10   \n",
              "..        ...        ...          ...           ...             ...   \n",
              "464    926424          0        21.56         22.39          142.00   \n",
              "465    926682          0        20.13         28.25          131.20   \n",
              "466    926954          0        16.60         28.08          108.30   \n",
              "467    927241          0        20.60         29.33          140.10   \n",
              "468     92751          1         7.76         24.54           47.92   \n",
              "\n",
              "     area_mean  smoothness_mean  compactness_mean  concavity_mean  \\\n",
              "0       1001.0          0.11840           0.27760         0.30010   \n",
              "1       1326.0          0.08474           0.07864         0.08690   \n",
              "2       1203.0          0.10960           0.15990         0.19740   \n",
              "3        386.1          0.14250           0.28390         0.24140   \n",
              "4       1297.0          0.10030           0.13280         0.19800   \n",
              "..         ...              ...               ...             ...   \n",
              "464     1479.0          0.11100           0.11590         0.24390   \n",
              "465     1261.0          0.09780           0.10340         0.14400   \n",
              "466      858.1          0.08455           0.10230         0.09251   \n",
              "467     1265.0          0.11780           0.27700         0.35140   \n",
              "468      181.0          0.05263           0.04362         0.00000   \n",
              "\n",
              "     concave points_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n",
              "0                0.14710  ...        25.380          17.33           184.60   \n",
              "1                0.07017  ...        24.990          23.41           158.80   \n",
              "2                0.12790  ...        23.570          25.53           152.50   \n",
              "3                0.10520  ...        14.910          26.50            98.87   \n",
              "4                0.10430  ...        22.540          16.67           152.20   \n",
              "..                   ...  ...           ...            ...              ...   \n",
              "464              0.13890  ...        25.450          26.40           166.10   \n",
              "465              0.09791  ...        23.690          38.25           155.00   \n",
              "466              0.05302  ...        18.980          34.12           126.70   \n",
              "467              0.15200  ...        25.740          39.42           184.60   \n",
              "468              0.00000  ...         9.456          30.37            59.16   \n",
              "\n",
              "     area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n",
              "0        2019.0           0.16220            0.66560           0.7119   \n",
              "1        1956.0           0.12380            0.18660           0.2416   \n",
              "2        1709.0           0.14440            0.42450           0.4504   \n",
              "3         567.7           0.20980            0.86630           0.6869   \n",
              "4        1575.0           0.13740            0.20500           0.4000   \n",
              "..          ...               ...                ...              ...   \n",
              "464      2027.0           0.14100            0.21130           0.4107   \n",
              "465      1731.0           0.11660            0.19220           0.3215   \n",
              "466      1124.0           0.11390            0.30940           0.3403   \n",
              "467      1821.0           0.16500            0.86810           0.9387   \n",
              "468       268.6           0.08996            0.06444           0.0000   \n",
              "\n",
              "     concave points_worst  symmetry_worst  fractal_dimension_worst  \n",
              "0                  0.2654          0.4601                  0.11890  \n",
              "1                  0.1860          0.2750                  0.08902  \n",
              "2                  0.2430          0.3613                  0.08758  \n",
              "3                  0.2575          0.6638                  0.17300  \n",
              "4                  0.1625          0.2364                  0.07678  \n",
              "..                    ...             ...                      ...  \n",
              "464                0.2216          0.2060                  0.07115  \n",
              "465                0.1628          0.2572                  0.06637  \n",
              "466                0.1418          0.2218                  0.07820  \n",
              "467                0.2650          0.4087                  0.12400  \n",
              "468                0.0000          0.2871                  0.07039  \n",
              "\n",
              "[469 rows x 32 columns]"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data['diagnosis'].replace(['M', 'B'],[0, 1], inplace=True)\n",
        "data"
      ],
      "id": "RwovL81gimfw"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "06f450dd"
      },
      "source": [
        "## Using Sagemaker Libraries to achieve parallelism"
      ],
      "id": "06f450dd"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2bb4e61f"
      },
      "outputs": [],
      "source": [
        "import sagemaker\n",
        "import boto3\n",
        "from sagemaker.tuner import (\n",
        "    IntegerParameter,\n",
        "    CategoricalParameter,\n",
        "    ContinuousParameter,\n",
        "    HyperparameterTuner,\n",
        ")\n",
        "\n",
        "import numpy as np  # For matrix operations and numerical processing\n",
        "import pandas as pd  # For munging tabular data\n",
        "import os\n",
        "from time import gmtime, strftime\n",
        "\n",
        "region = boto3.Session().region_name\n",
        "smclient = boto3.Session().client(\"sagemaker\")\n",
        "\n",
        "role = sagemaker.get_execution_role()\n",
        "\n",
        "bucket = 'myawsbucket658'\n",
        "prefix = 'sagemaker/data'"
      ],
      "id": "2bb4e61f"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8d2619ec"
      },
      "source": [
        "## Spliting Dataset into train_data, validation_data, test_data"
      ],
      "id": "8d2619ec"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fe1853ce"
      },
      "outputs": [],
      "source": [
        "train_data, validation_data, test_data = np.split(data.sample(frac=1, random_state=1729),\n",
        "                                                  [int(0.7 * len(data)), int(0.9 * len(data))])"
      ],
      "id": "fe1853ce"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f240e9dd"
      },
      "source": [
        "## Uploading Train, Test and Validation Set to S3 Bucket"
      ],
      "id": "f240e9dd"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5db888a6"
      },
      "outputs": [],
      "source": [
        "train_data.to_csv(\"train.csv\", index=False, header=False)\n",
        "validation_data.to_csv(\"validation.csv\", index=False, header=False)\n",
        "test_data.to_csv(\"test.csv\", index=False, header=False)"
      ],
      "id": "5db888a6"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "c414e9ee"
      },
      "outputs": [],
      "source": [
        "boto3.Session().resource(\"s3\").Bucket(bucket).Object(os.path.join(prefix, \"train/train.csv\")).upload_file(\"train.csv\")\n",
        "boto3.Session().resource(\"s3\").Bucket(bucket).Object(os.path.join(prefix, \"validation/validation.csv\")).upload_file(\"validation.csv\")"
      ],
      "id": "c414e9ee"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "886d3dd4"
      },
      "source": [
        "## Input for SageMaker"
      ],
      "id": "886d3dd4"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5cf01c0e"
      },
      "outputs": [],
      "source": [
        "from sagemaker.inputs import TrainingInput\n",
        "\n",
        "s3_input_train = TrainingInput(\n",
        "    s3_data=\"s3://{}/{}/train\".format(bucket, prefix), content_type=\"csv\"\n",
        ")\n",
        "\n",
        "s3_input_validation = TrainingInput(\n",
        "    s3_data=\"s3://{}/{}/validation\".format(bucket, prefix), content_type=\"csv\"\n",
        ")"
      ],
      "id": "5cf01c0e"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ff82b2b4"
      },
      "source": [
        "## Setting Up Hyperparameter Tuning Job"
      ],
      "id": "ff82b2b4"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "c51d9985"
      },
      "outputs": [],
      "source": [
        "from sagemaker.amazon.amazon_estimator import get_image_uri\n",
        "from sagemaker.image_uris import retrieve\n",
        "\n",
        "sess = sagemaker.Session()\n",
        "\n",
        "container = retrieve(\"xgboost\", region, \"latest\")\n",
        "\n",
        "xgb = sagemaker.estimator.Estimator(\n",
        "    container,\n",
        "    role,\n",
        "    base_job_name=\"xgboost-random-search\",\n",
        "    instance_count=1,\n",
        "    instance_type=\"ml.m4.xlarge\",\n",
        "    output_path=\"s3://{}/{}/output\".format(bucket, prefix),\n",
        "    sagemaker_session=sess,\n",
        ")\n",
        "\n",
        "xgb.set_hyperparameters(\n",
        "    eval_metric=\"auc\",\n",
        "    objective=\"binary:logistic\",\n",
        "    num_round=10,\n",
        "    rate_drop=0.3,\n",
        "    tweedie_variance_power=1.4,\n",
        ")\n",
        "objective_metric_name = \"validation:auc\""
      ],
      "id": "c51d9985"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ccd57c80"
      },
      "source": [
        "### Random Search with Logarithmic Scaling"
      ],
      "id": "ccd57c80"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "36fbf05b"
      },
      "outputs": [],
      "source": [
        "hyperparameter_ranges = {\n",
        "    \"alpha\": ContinuousParameter(0.01, 10, scaling_type=\"Logarithmic\"),\n",
        "    \"lambda\": ContinuousParameter(0.01, 10, scaling_type=\"Logarithmic\"),\n",
        "}"
      ],
      "id": "36fbf05b"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2811c94d",
        "outputId": "42147e9c-565e-42da-97e8-93881085b60d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "......................................................!\n"
          ]
        }
      ],
      "source": [
        "tuner_log = HyperparameterTuner(\n",
        "    xgb,\n",
        "    objective_metric_name,\n",
        "    hyperparameter_ranges,\n",
        "    max_jobs=5,\n",
        "    max_parallel_jobs=5,\n",
        "    strategy=\"Random\",\n",
        ")\n",
        "\n",
        "tuner_log.fit(\n",
        "    {\"train\": s3_input_train, \"validation\": s3_input_validation},\n",
        "    include_cls_metadata=False,\n",
        "    job_name=\"xgb-randsearch-\" + strftime(\"%Y%m%d-%H-%M-%S\", gmtime()),\n",
        ")"
      ],
      "id": "2811c94d"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "e29571ce",
        "outputId": "8ceb42c6-26c1-4636-97a3-2a21b1985a8d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "'Completed'"
            ]
          },
          "execution_count": 25,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "boto3.client(\"sagemaker\").describe_hyper_parameter_tuning_job(\n",
        "    HyperParameterTuningJobName=tuner_log.latest_tuning_job.job_name\n",
        ")[\"HyperParameterTuningJobStatus\"]"
      ],
      "id": "e29571ce"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9ff989ba"
      },
      "source": [
        "### Random Search with Linear Scaling"
      ],
      "id": "9ff989ba"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "c86a8a45"
      },
      "outputs": [],
      "source": [
        "hyperparameter_ranges_linear = {\n",
        "    \"alpha\": ContinuousParameter(0.01, 10, scaling_type=\"Linear\"),\n",
        "    \"lambda\": ContinuousParameter(0.01, 10, scaling_type=\"Linear\"),\n",
        "}"
      ],
      "id": "c86a8a45"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "376220d3",
        "outputId": "944c9ce6-1c85-4854-a493-07aed616918b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "...............................................................!\n"
          ]
        }
      ],
      "source": [
        "tuner_linear = HyperparameterTuner(\n",
        "    xgb,\n",
        "    objective_metric_name,\n",
        "    hyperparameter_ranges_linear,\n",
        "    max_jobs=5,\n",
        "    max_parallel_jobs=5,\n",
        "    strategy=\"Random\",\n",
        ")\n",
        "\n",
        "tuner_linear.fit(\n",
        "    {\"train\": s3_input_train, \"validation\": s3_input_validation},\n",
        "    include_cls_metadata=False,\n",
        "    job_name=\"xgb-linsearch-\" + strftime(\"%Y%m%d-%H-%M-%S\", gmtime()),\n",
        ")"
      ],
      "id": "376220d3"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8ae4376f",
        "outputId": "8c7277d7-c6a0-40b4-a43d-93656e498b24"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "'Completed'"
            ]
          },
          "execution_count": 27,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "boto3.client(\"sagemaker\").describe_hyper_parameter_tuning_job(\n",
        "    HyperParameterTuningJobName=tuner_linear.latest_tuning_job.job_name\n",
        ")[\"HyperParameterTuningJobStatus\"]"
      ],
      "id": "8ae4376f"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f7393593"
      },
      "source": [
        "## Comparing Model Performances"
      ],
      "id": "f7393593"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "e44f2222",
        "outputId": "a0ff003e-89c6-4ae0-b517-6b74804e5e86"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/boto3/compat.py:88: PythonDeprecationWarning: Boto3 will no longer support Python 3.6 starting May 30, 2022. To continue receiving service updates, bug fixes, and security updates please upgrade to Python 3.7 or later. More information can be found here: https://aws.amazon.com/blogs/developer/python-support-policy-updates-for-aws-sdks-and-tools/\n",
            "  warnings.warn(warning, PythonDeprecationWarning)\n"
          ]
        }
      ],
      "source": [
        "import seaborn as sns\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# check jobs have finished\n",
        "status_log = boto3.client(\"sagemaker\").describe_hyper_parameter_tuning_job(\n",
        "    HyperParameterTuningJobName=tuner_log.latest_tuning_job.job_name\n",
        ")[\"HyperParameterTuningJobStatus\"]\n",
        "status_linear = boto3.client(\"sagemaker\").describe_hyper_parameter_tuning_job(\n",
        "    HyperParameterTuningJobName=tuner_linear.latest_tuning_job.job_name\n",
        ")[\"HyperParameterTuningJobStatus\"]\n",
        "\n",
        "assert status_log == \"Completed\", \"First must be completed, was {}\".format(status_log)\n",
        "assert status_linear == \"Completed\", \"Second must be completed, was {}\".format(status_linear)\n",
        "\n",
        "df_log = sagemaker.HyperparameterTuningJobAnalytics(\n",
        "    tuner_log.latest_tuning_job.job_name\n",
        ").dataframe()\n",
        "df_linear = sagemaker.HyperparameterTuningJobAnalytics(\n",
        "    tuner_linear.latest_tuning_job.job_name\n",
        ").dataframe()\n",
        "df_log[\"scaling\"] = \"log\"\n",
        "df_linear[\"scaling\"] = \"linear\"\n",
        "df = pd.concat([df_log, df_linear], ignore_index=True)\n"
      ],
      "id": "e44f2222"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "17c160a3",
        "outputId": "afdea871-feaf-4197-ff92-7eda902065d1"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x216 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "g = sns.FacetGrid(df, col=\"scaling\", palette=\"viridis\")\n",
        "g = g.map(plt.scatter, \"alpha\", \"lambda\", alpha=0.6)"
      ],
      "id": "17c160a3"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QjbDm1-Qimf5"
      },
      "source": [
        "## Linear Scaling has performed better than Logarithmic scaling"
      ],
      "id": "QjbDm1-Qimf5"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "35505328"
      },
      "source": [
        "## Deploying Best Model - Linear Scaling"
      ],
      "id": "35505328"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2e5c31f5",
        "outputId": "cd9e4f02-c992-4415-9057-879c42b6351e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "2022-06-12 14:08:36 Starting - Preparing the instances for training\n",
            "2022-06-12 14:08:36 Downloading - Downloading input data\n",
            "2022-06-12 14:08:36 Training - Training image download completed. Training in progress.\n",
            "2022-06-12 14:08:36 Uploading - Uploading generated training model\n",
            "2022-06-12 14:08:36 Completed - Training job completed\n",
            "-------!"
          ]
        }
      ],
      "source": [
        "predictor = tuner_linear.deploy(initial_instance_count=1, instance_type=\"ml.m4.xlarge\")"
      ],
      "id": "2e5c31f5"
    }
  ],
  "metadata": {
    "colab": {
      "name": "ML_Model_Implementation using_Sagemaker.ipynb",
      "provenance": []
    },
    "instance_type": "ml.t3.medium",
    "kernelspec": {
      "display_name": "Python 3 (Data Science)",
      "language": "python",
      "name": "python3__SAGEMAKER_INTERNAL__arn:aws:sagemaker:us-west-2:236514542706:image/datascience-1.0"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.10"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}